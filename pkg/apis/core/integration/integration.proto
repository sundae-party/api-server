syntax = "proto3";

package types;

option go_package = "github.com/sundae-party/api-server/pkg/apis/core/types";

service IntegrationHandler {
    rpc Create (Integration) returns (Integration);
    rpc Get (IntegrationServerRequest) returns (Integration);
    rpc Delete (Integration) returns (Integration);

    rpc SetState (SetIntegrationStateRequest) returns (Integration);
    rpc SetDesiredState (SetIntegrationStateRequest) returns (Integration);

    // Integration event format
    rpc SubscribeEvents (Integration) returns (stream Integration);

    rpc StorePut (IntegrationStoreRequest) returns (IntegrationStoreRequest);
    rpc StoreGet (IntegrationStoreRequest) returns (IntegrationStoreRequest);
}

// Persistent storage in the api-server store
message IntegrationStoreRequest {
    string integration_name = 1;
    string key = 2;
    string value = 3;
}

message IntegrationServerRequest {
    string integration_name = 1;
}

// Set state or desired state
message SetIntegrationStateRequest {
    string integration_name = 1;
    IntegrationState state = 5;
}

message Integration {
    string name = 1;
    string documentation = 2;
    string version = 3;
    string url = 4;
    IntegrationState state = 5;
    IntegrationState desired_state = 6;
    repeated IntegrationService services = 7;
    string mutation = 8;
}

message IntegrationState {
    bool connected = 1;
    // Service name to execute in desired state, can be empty
    // Service name curently executed in the state, can be empty
    string service_name = 2;
    // If an integration executing a service service_status should be set to working otherwise idle should be used
    bool service_idle = 3;
    // Data if needed for service
    string service_data = 4;
}

// service will be call by set desired state of an integration
message IntegrationService {
    string name = 1;
    string data = 2;
}