// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package integration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IntegrationHandlerClient is the client API for IntegrationHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntegrationHandlerClient interface {
	Create(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error)
	Get(ctx context.Context, in *IntegrationServerRequest, opts ...grpc.CallOption) (*Integration, error)
	Delete(ctx context.Context, in *IntegrationServerRequest, opts ...grpc.CallOption) (*Integration, error)
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*State, error)
	CallService(ctx context.Context, in *CallServiceRequest, opts ...grpc.CallOption) (*CallServiceResponse, error)
	StorePut(ctx context.Context, in *StorePutRequest, opts ...grpc.CallOption) (IntegrationHandler_StorePutClient, error)
}

type integrationHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewIntegrationHandlerClient(cc grpc.ClientConnInterface) IntegrationHandlerClient {
	return &integrationHandlerClient{cc}
}

func (c *integrationHandlerClient) Create(ctx context.Context, in *Integration, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/integration.IntegrationHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationHandlerClient) Get(ctx context.Context, in *IntegrationServerRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/integration.IntegrationHandler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationHandlerClient) Delete(ctx context.Context, in *IntegrationServerRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, "/integration.IntegrationHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationHandlerClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/integration.IntegrationHandler/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationHandlerClient) CallService(ctx context.Context, in *CallServiceRequest, opts ...grpc.CallOption) (*CallServiceResponse, error) {
	out := new(CallServiceResponse)
	err := c.cc.Invoke(ctx, "/integration.IntegrationHandler/CallService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integrationHandlerClient) StorePut(ctx context.Context, in *StorePutRequest, opts ...grpc.CallOption) (IntegrationHandler_StorePutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IntegrationHandler_serviceDesc.Streams[0], "/integration.IntegrationHandler/StorePut", opts...)
	if err != nil {
		return nil, err
	}
	x := &integrationHandlerStorePutClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IntegrationHandler_StorePutClient interface {
	Recv() (*StorePutRequest, error)
	grpc.ClientStream
}

type integrationHandlerStorePutClient struct {
	grpc.ClientStream
}

func (x *integrationHandlerStorePutClient) Recv() (*StorePutRequest, error) {
	m := new(StorePutRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IntegrationHandlerServer is the server API for IntegrationHandler service.
// All implementations must embed UnimplementedIntegrationHandlerServer
// for forward compatibility
type IntegrationHandlerServer interface {
	Create(context.Context, *Integration) (*Integration, error)
	Get(context.Context, *IntegrationServerRequest) (*Integration, error)
	Delete(context.Context, *IntegrationServerRequest) (*Integration, error)
	SetState(context.Context, *SetStateRequest) (*State, error)
	CallService(context.Context, *CallServiceRequest) (*CallServiceResponse, error)
	StorePut(*StorePutRequest, IntegrationHandler_StorePutServer) error
	mustEmbedUnimplementedIntegrationHandlerServer()
}

// UnimplementedIntegrationHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedIntegrationHandlerServer struct {
}

func (UnimplementedIntegrationHandlerServer) Create(context.Context, *Integration) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIntegrationHandlerServer) Get(context.Context, *IntegrationServerRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIntegrationHandlerServer) Delete(context.Context, *IntegrationServerRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIntegrationHandlerServer) SetState(context.Context, *SetStateRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedIntegrationHandlerServer) CallService(context.Context, *CallServiceRequest) (*CallServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallService not implemented")
}
func (UnimplementedIntegrationHandlerServer) StorePut(*StorePutRequest, IntegrationHandler_StorePutServer) error {
	return status.Errorf(codes.Unimplemented, "method StorePut not implemented")
}
func (UnimplementedIntegrationHandlerServer) mustEmbedUnimplementedIntegrationHandlerServer() {}

// UnsafeIntegrationHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntegrationHandlerServer will
// result in compilation errors.
type UnsafeIntegrationHandlerServer interface {
	mustEmbedUnimplementedIntegrationHandlerServer()
}

func RegisterIntegrationHandlerServer(s grpc.ServiceRegistrar, srv IntegrationHandlerServer) {
	s.RegisterService(&_IntegrationHandler_serviceDesc, srv)
}

func _IntegrationHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Integration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration.IntegrationHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationHandlerServer).Create(ctx, req.(*Integration))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration.IntegrationHandler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationHandlerServer).Get(ctx, req.(*IntegrationServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegrationServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration.IntegrationHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationHandlerServer).Delete(ctx, req.(*IntegrationServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationHandler_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationHandlerServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration.IntegrationHandler/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationHandlerServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationHandler_CallService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegrationHandlerServer).CallService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/integration.IntegrationHandler/CallService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegrationHandlerServer).CallService(ctx, req.(*CallServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegrationHandler_StorePut_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StorePutRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IntegrationHandlerServer).StorePut(m, &integrationHandlerStorePutServer{stream})
}

type IntegrationHandler_StorePutServer interface {
	Send(*StorePutRequest) error
	grpc.ServerStream
}

type integrationHandlerStorePutServer struct {
	grpc.ServerStream
}

func (x *integrationHandlerStorePutServer) Send(m *StorePutRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _IntegrationHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "integration.IntegrationHandler",
	HandlerType: (*IntegrationHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IntegrationHandler_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IntegrationHandler_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IntegrationHandler_Delete_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _IntegrationHandler_SetState_Handler,
		},
		{
			MethodName: "CallService",
			Handler:    _IntegrationHandler_CallService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StorePut",
			Handler:       _IntegrationHandler_StorePut_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "integration.proto",
}
