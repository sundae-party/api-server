// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SunHandlerClient is the client API for SunHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SunHandlerClient interface {
	Get(ctx context.Context, in *SunRequest, opts ...grpc.CallOption) (*Sun, error)
	Create(ctx context.Context, in *Sun, opts ...grpc.CallOption) (*Sun, error)
	Delete(ctx context.Context, in *SunRequest, opts ...grpc.CallOption) (*Sun, error)
	Watch(ctx context.Context, in *SunRequest, opts ...grpc.CallOption) (SunHandler_WatchClient, error)
	SetState(ctx context.Context, in *SunState, opts ...grpc.CallOption) (*Sun, error)
}

type sunHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewSunHandlerClient(cc grpc.ClientConnInterface) SunHandlerClient {
	return &sunHandlerClient{cc}
}

func (c *sunHandlerClient) Get(ctx context.Context, in *SunRequest, opts ...grpc.CallOption) (*Sun, error) {
	out := new(Sun)
	err := c.cc.Invoke(ctx, "/types.SunHandler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunHandlerClient) Create(ctx context.Context, in *Sun, opts ...grpc.CallOption) (*Sun, error) {
	out := new(Sun)
	err := c.cc.Invoke(ctx, "/types.SunHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunHandlerClient) Delete(ctx context.Context, in *SunRequest, opts ...grpc.CallOption) (*Sun, error) {
	out := new(Sun)
	err := c.cc.Invoke(ctx, "/types.SunHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sunHandlerClient) Watch(ctx context.Context, in *SunRequest, opts ...grpc.CallOption) (SunHandler_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SunHandler_serviceDesc.Streams[0], "/types.SunHandler/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &sunHandlerWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SunHandler_WatchClient interface {
	Recv() (*Sun, error)
	grpc.ClientStream
}

type sunHandlerWatchClient struct {
	grpc.ClientStream
}

func (x *sunHandlerWatchClient) Recv() (*Sun, error) {
	m := new(Sun)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sunHandlerClient) SetState(ctx context.Context, in *SunState, opts ...grpc.CallOption) (*Sun, error) {
	out := new(Sun)
	err := c.cc.Invoke(ctx, "/types.SunHandler/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SunHandlerServer is the server API for SunHandler service.
// All implementations must embed UnimplementedSunHandlerServer
// for forward compatibility
type SunHandlerServer interface {
	Get(context.Context, *SunRequest) (*Sun, error)
	Create(context.Context, *Sun) (*Sun, error)
	Delete(context.Context, *SunRequest) (*Sun, error)
	Watch(*SunRequest, SunHandler_WatchServer) error
	SetState(context.Context, *SunState) (*Sun, error)
	mustEmbedUnimplementedSunHandlerServer()
}

// UnimplementedSunHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedSunHandlerServer struct {
}

func (UnimplementedSunHandlerServer) Get(context.Context, *SunRequest) (*Sun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSunHandlerServer) Create(context.Context, *Sun) (*Sun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSunHandlerServer) Delete(context.Context, *SunRequest) (*Sun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSunHandlerServer) Watch(*SunRequest, SunHandler_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedSunHandlerServer) SetState(context.Context, *SunState) (*Sun, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedSunHandlerServer) mustEmbedUnimplementedSunHandlerServer() {}

// UnsafeSunHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SunHandlerServer will
// result in compilation errors.
type UnsafeSunHandlerServer interface {
	mustEmbedUnimplementedSunHandlerServer()
}

func RegisterSunHandlerServer(s grpc.ServiceRegistrar, srv SunHandlerServer) {
	s.RegisterService(&_SunHandler_serviceDesc, srv)
}

func _SunHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.SunHandler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunHandlerServer).Get(ctx, req.(*SunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SunHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.SunHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunHandlerServer).Create(ctx, req.(*Sun))
	}
	return interceptor(ctx, in, info, handler)
}

func _SunHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.SunHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunHandlerServer).Delete(ctx, req.(*SunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SunHandler_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SunHandlerServer).Watch(m, &sunHandlerWatchServer{stream})
}

type SunHandler_WatchServer interface {
	Send(*Sun) error
	grpc.ServerStream
}

type sunHandlerWatchServer struct {
	grpc.ServerStream
}

func (x *sunHandlerWatchServer) Send(m *Sun) error {
	return x.ServerStream.SendMsg(m)
}

func _SunHandler_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SunState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SunHandlerServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.SunHandler/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SunHandlerServer).SetState(ctx, req.(*SunState))
	}
	return interceptor(ctx, in, info, handler)
}

var _SunHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.SunHandler",
	HandlerType: (*SunHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SunHandler_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SunHandler_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SunHandler_Delete_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _SunHandler_SetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _SunHandler_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sun.proto",
}
