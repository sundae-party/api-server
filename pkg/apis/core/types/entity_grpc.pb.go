// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EntityHandlerClient is the client API for EntityHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityHandlerClient interface {
	Create(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Update(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Delete(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Watch(ctx context.Context, in *Entity, opts ...grpc.CallOption) (EntityHandler_WatchClient, error)
	GetByIntegration(ctx context.Context, in *Integration, opts ...grpc.CallOption) (EntityHandler_GetByIntegrationClient, error)
	Get(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (EntityHandler_GetClient, error)
}

type entityHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityHandlerClient(cc grpc.ClientConnInterface) EntityHandlerClient {
	return &entityHandlerClient{cc}
}

func (c *entityHandlerClient) Create(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/types.EntityHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHandlerClient) Update(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/types.EntityHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHandlerClient) Delete(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/types.EntityHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityHandlerClient) Watch(ctx context.Context, in *Entity, opts ...grpc.CallOption) (EntityHandler_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EntityHandler_serviceDesc.Streams[0], "/types.EntityHandler/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &entityHandlerWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EntityHandler_WatchClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type entityHandlerWatchClient struct {
	grpc.ClientStream
}

func (x *entityHandlerWatchClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *entityHandlerClient) GetByIntegration(ctx context.Context, in *Integration, opts ...grpc.CallOption) (EntityHandler_GetByIntegrationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EntityHandler_serviceDesc.Streams[1], "/types.EntityHandler/GetByIntegration", opts...)
	if err != nil {
		return nil, err
	}
	x := &entityHandlerGetByIntegrationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EntityHandler_GetByIntegrationClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type entityHandlerGetByIntegrationClient struct {
	grpc.ClientStream
}

func (x *entityHandlerGetByIntegrationClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *entityHandlerClient) Get(ctx context.Context, in *GetEntitiesRequest, opts ...grpc.CallOption) (EntityHandler_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EntityHandler_serviceDesc.Streams[2], "/types.EntityHandler/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &entityHandlerGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EntityHandler_GetClient interface {
	Recv() (*Entity, error)
	grpc.ClientStream
}

type entityHandlerGetClient struct {
	grpc.ClientStream
}

func (x *entityHandlerGetClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EntityHandlerServer is the server API for EntityHandler service.
// All implementations must embed UnimplementedEntityHandlerServer
// for forward compatibility
type EntityHandlerServer interface {
	Create(context.Context, *Entity) (*Entity, error)
	Update(context.Context, *Entity) (*Entity, error)
	Delete(context.Context, *Entity) (*Entity, error)
	Watch(*Entity, EntityHandler_WatchServer) error
	GetByIntegration(*Integration, EntityHandler_GetByIntegrationServer) error
	Get(*GetEntitiesRequest, EntityHandler_GetServer) error
	mustEmbedUnimplementedEntityHandlerServer()
}

// UnimplementedEntityHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedEntityHandlerServer struct {
}

func (UnimplementedEntityHandlerServer) Create(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEntityHandlerServer) Update(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedEntityHandlerServer) Delete(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEntityHandlerServer) Watch(*Entity, EntityHandler_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedEntityHandlerServer) GetByIntegration(*Integration, EntityHandler_GetByIntegrationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByIntegration not implemented")
}
func (UnimplementedEntityHandlerServer) Get(*GetEntitiesRequest, EntityHandler_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEntityHandlerServer) mustEmbedUnimplementedEntityHandlerServer() {}

// UnsafeEntityHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityHandlerServer will
// result in compilation errors.
type UnsafeEntityHandlerServer interface {
	mustEmbedUnimplementedEntityHandlerServer()
}

func RegisterEntityHandlerServer(s grpc.ServiceRegistrar, srv EntityHandlerServer) {
	s.RegisterService(&_EntityHandler_serviceDesc, srv)
}

func _EntityHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.EntityHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHandlerServer).Create(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.EntityHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHandlerServer).Update(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.EntityHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityHandlerServer).Delete(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityHandler_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntityHandlerServer).Watch(m, &entityHandlerWatchServer{stream})
}

type EntityHandler_WatchServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type entityHandlerWatchServer struct {
	grpc.ServerStream
}

func (x *entityHandlerWatchServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func _EntityHandler_GetByIntegration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Integration)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntityHandlerServer).GetByIntegration(m, &entityHandlerGetByIntegrationServer{stream})
}

type EntityHandler_GetByIntegrationServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type entityHandlerGetByIntegrationServer struct {
	grpc.ServerStream
}

func (x *entityHandlerGetByIntegrationServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func _EntityHandler_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEntitiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EntityHandlerServer).Get(m, &entityHandlerGetServer{stream})
}

type EntityHandler_GetServer interface {
	Send(*Entity) error
	grpc.ServerStream
}

type entityHandlerGetServer struct {
	grpc.ServerStream
}

func (x *entityHandlerGetServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

var _EntityHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.EntityHandler",
	HandlerType: (*EntityHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EntityHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _EntityHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EntityHandler_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _EntityHandler_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetByIntegration",
			Handler:       _EntityHandler_GetByIntegration_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _EntityHandler_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "entity.proto",
}
