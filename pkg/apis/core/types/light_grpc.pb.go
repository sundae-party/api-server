// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LightHandlerClient is the client API for LightHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightHandlerClient interface {
	SetDesiredState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error)
	SetState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error)
	Create(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error)
	GetByDevice(ctx context.Context, in *Integration, opts ...grpc.CallOption) (LightHandler_GetByDeviceClient, error)
	GetByIntegration(ctx context.Context, in *Integration, opts ...grpc.CallOption) (LightHandler_GetByIntegrationClient, error)
}

type lightHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewLightHandlerClient(cc grpc.ClientConnInterface) LightHandlerClient {
	return &lightHandlerClient{cc}
}

func (c *lightHandlerClient) SetDesiredState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error) {
	out := new(Light)
	err := c.cc.Invoke(ctx, "/types.LightHandler/SetDesiredState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightHandlerClient) SetState(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error) {
	out := new(Light)
	err := c.cc.Invoke(ctx, "/types.LightHandler/SetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightHandlerClient) Create(ctx context.Context, in *Light, opts ...grpc.CallOption) (*Light, error) {
	out := new(Light)
	err := c.cc.Invoke(ctx, "/types.LightHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightHandlerClient) GetByDevice(ctx context.Context, in *Integration, opts ...grpc.CallOption) (LightHandler_GetByDeviceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LightHandler_serviceDesc.Streams[0], "/types.LightHandler/GetByDevice", opts...)
	if err != nil {
		return nil, err
	}
	x := &lightHandlerGetByDeviceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LightHandler_GetByDeviceClient interface {
	Recv() (*Light, error)
	grpc.ClientStream
}

type lightHandlerGetByDeviceClient struct {
	grpc.ClientStream
}

func (x *lightHandlerGetByDeviceClient) Recv() (*Light, error) {
	m := new(Light)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lightHandlerClient) GetByIntegration(ctx context.Context, in *Integration, opts ...grpc.CallOption) (LightHandler_GetByIntegrationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LightHandler_serviceDesc.Streams[1], "/types.LightHandler/GetByIntegration", opts...)
	if err != nil {
		return nil, err
	}
	x := &lightHandlerGetByIntegrationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LightHandler_GetByIntegrationClient interface {
	Recv() (*Light, error)
	grpc.ClientStream
}

type lightHandlerGetByIntegrationClient struct {
	grpc.ClientStream
}

func (x *lightHandlerGetByIntegrationClient) Recv() (*Light, error) {
	m := new(Light)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LightHandlerServer is the server API for LightHandler service.
// All implementations must embed UnimplementedLightHandlerServer
// for forward compatibility
type LightHandlerServer interface {
	SetDesiredState(context.Context, *Light) (*Light, error)
	SetState(context.Context, *Light) (*Light, error)
	Create(context.Context, *Light) (*Light, error)
	GetByDevice(*Integration, LightHandler_GetByDeviceServer) error
	GetByIntegration(*Integration, LightHandler_GetByIntegrationServer) error
	mustEmbedUnimplementedLightHandlerServer()
}

// UnimplementedLightHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedLightHandlerServer struct {
}

func (UnimplementedLightHandlerServer) SetDesiredState(context.Context, *Light) (*Light, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDesiredState not implemented")
}
func (UnimplementedLightHandlerServer) SetState(context.Context, *Light) (*Light, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedLightHandlerServer) Create(context.Context, *Light) (*Light, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLightHandlerServer) GetByDevice(*Integration, LightHandler_GetByDeviceServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByDevice not implemented")
}
func (UnimplementedLightHandlerServer) GetByIntegration(*Integration, LightHandler_GetByIntegrationServer) error {
	return status.Errorf(codes.Unimplemented, "method GetByIntegration not implemented")
}
func (UnimplementedLightHandlerServer) mustEmbedUnimplementedLightHandlerServer() {}

// UnsafeLightHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightHandlerServer will
// result in compilation errors.
type UnsafeLightHandlerServer interface {
	mustEmbedUnimplementedLightHandlerServer()
}

func RegisterLightHandlerServer(s grpc.ServiceRegistrar, srv LightHandlerServer) {
	s.RegisterService(&_LightHandler_serviceDesc, srv)
}

func _LightHandler_SetDesiredState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Light)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightHandlerServer).SetDesiredState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LightHandler/SetDesiredState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightHandlerServer).SetDesiredState(ctx, req.(*Light))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightHandler_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Light)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightHandlerServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LightHandler/SetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightHandlerServer).SetState(ctx, req.(*Light))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Light)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.LightHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightHandlerServer).Create(ctx, req.(*Light))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightHandler_GetByDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Integration)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LightHandlerServer).GetByDevice(m, &lightHandlerGetByDeviceServer{stream})
}

type LightHandler_GetByDeviceServer interface {
	Send(*Light) error
	grpc.ServerStream
}

type lightHandlerGetByDeviceServer struct {
	grpc.ServerStream
}

func (x *lightHandlerGetByDeviceServer) Send(m *Light) error {
	return x.ServerStream.SendMsg(m)
}

func _LightHandler_GetByIntegration_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Integration)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LightHandlerServer).GetByIntegration(m, &lightHandlerGetByIntegrationServer{stream})
}

type LightHandler_GetByIntegrationServer interface {
	Send(*Light) error
	grpc.ServerStream
}

type lightHandlerGetByIntegrationServer struct {
	grpc.ServerStream
}

func (x *lightHandlerGetByIntegrationServer) Send(m *Light) error {
	return x.ServerStream.SendMsg(m)
}

var _LightHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.LightHandler",
	HandlerType: (*LightHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDesiredState",
			Handler:    _LightHandler_SetDesiredState_Handler,
		},
		{
			MethodName: "SetState",
			Handler:    _LightHandler_SetState_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LightHandler_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetByDevice",
			Handler:       _LightHandler_GetByDevice_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetByIntegration",
			Handler:       _LightHandler_GetByIntegration_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "light.proto",
}
