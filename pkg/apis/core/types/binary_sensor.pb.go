// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: binary_sensor.proto

package types

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SetBinarySensorStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinarySensorName string `protobuf:"bytes,1,opt,name=binarySensorName,proto3" json:"binarySensorName,omitempty"`
	IntegrationName  string `protobuf:"bytes,2,opt,name=integrationName,proto3" json:"integrationName,omitempty"`
	State            bool   `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SetBinarySensorStateRequest) Reset() {
	*x = SetBinarySensorStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binary_sensor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBinarySensorStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBinarySensorStateRequest) ProtoMessage() {}

func (x *SetBinarySensorStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_binary_sensor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBinarySensorStateRequest.ProtoReflect.Descriptor instead.
func (*SetBinarySensorStateRequest) Descriptor() ([]byte, []int) {
	return file_binary_sensor_proto_rawDescGZIP(), []int{0}
}

func (x *SetBinarySensorStateRequest) GetBinarySensorName() string {
	if x != nil {
		return x.BinarySensorName
	}
	return ""
}

func (x *SetBinarySensorStateRequest) GetIntegrationName() string {
	if x != nil {
		return x.IntegrationName
	}
	return ""
}

func (x *SetBinarySensorStateRequest) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type BinarySensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Integration   *Integration `protobuf:"bytes,2,opt,name=integration,proto3" json:"integration,omitempty"`
	Device        string       `protobuf:"bytes,3,opt,name=Device,proto3" json:"Device,omitempty"`
	DisplayedName string       `protobuf:"bytes,4,opt,name=displayed_name,json=displayedName,proto3" json:"displayed_name,omitempty"`
	Room          string       `protobuf:"bytes,5,opt,name=room,proto3" json:"room,omitempty"`
	State         bool         `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	Mutation      string       `protobuf:"bytes,7,opt,name=mutation,proto3" json:"mutation,omitempty"`
}

func (x *BinarySensor) Reset() {
	*x = BinarySensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_binary_sensor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinarySensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinarySensor) ProtoMessage() {}

func (x *BinarySensor) ProtoReflect() protoreflect.Message {
	mi := &file_binary_sensor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinarySensor.ProtoReflect.Descriptor instead.
func (*BinarySensor) Descriptor() ([]byte, []int) {
	return file_binary_sensor_proto_rawDescGZIP(), []int{1}
}

func (x *BinarySensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BinarySensor) GetIntegration() *Integration {
	if x != nil {
		return x.Integration
	}
	return nil
}

func (x *BinarySensor) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *BinarySensor) GetDisplayedName() string {
	if x != nil {
		return x.DisplayedName
	}
	return ""
}

func (x *BinarySensor) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *BinarySensor) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *BinarySensor) GetMutation() string {
	if x != nil {
		return x.Mutation
	}
	return ""
}

var File_binary_sensor_proto protoreflect.FileDescriptor

var file_binary_sensor_proto_rawDesc = []byte{
	0x0a, 0x13, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x11, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x89, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x0c,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x97, 0x03, 0x0a, 0x13,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a,
	0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x1a, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x13, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x35, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x30, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x41, 0x6c, 0x6c, 0x12, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x30, 0x01,
	0x12, 0x43, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x6e, 0x64, 0x61, 0x65, 0x2d, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x2f, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_binary_sensor_proto_rawDescOnce sync.Once
	file_binary_sensor_proto_rawDescData = file_binary_sensor_proto_rawDesc
)

func file_binary_sensor_proto_rawDescGZIP() []byte {
	file_binary_sensor_proto_rawDescOnce.Do(func() {
		file_binary_sensor_proto_rawDescData = protoimpl.X.CompressGZIP(file_binary_sensor_proto_rawDescData)
	})
	return file_binary_sensor_proto_rawDescData
}

var file_binary_sensor_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_binary_sensor_proto_goTypes = []interface{}{
	(*SetBinarySensorStateRequest)(nil), // 0: types.SetBinarySensorStateRequest
	(*BinarySensor)(nil),                // 1: types.BinarySensor
	(*Integration)(nil),                 // 2: types.Integration
	(*GetAllRequest)(nil),               // 3: types.GetAllRequest
}
var file_binary_sensor_proto_depIdxs = []int32{
	2, // 0: types.BinarySensor.integration:type_name -> types.Integration
	1, // 1: types.BinarySensorHandler.Get:input_type -> types.BinarySensor
	1, // 2: types.BinarySensorHandler.Create:input_type -> types.BinarySensor
	1, // 3: types.BinarySensorHandler.Update:input_type -> types.BinarySensor
	1, // 4: types.BinarySensorHandler.Delete:input_type -> types.BinarySensor
	3, // 5: types.BinarySensorHandler.GetAll:input_type -> types.GetAllRequest
	3, // 6: types.BinarySensorHandler.WatchAll:input_type -> types.GetAllRequest
	0, // 7: types.BinarySensorHandler.setState:input_type -> types.SetBinarySensorStateRequest
	1, // 8: types.BinarySensorHandler.Get:output_type -> types.BinarySensor
	1, // 9: types.BinarySensorHandler.Create:output_type -> types.BinarySensor
	1, // 10: types.BinarySensorHandler.Update:output_type -> types.BinarySensor
	1, // 11: types.BinarySensorHandler.Delete:output_type -> types.BinarySensor
	1, // 12: types.BinarySensorHandler.GetAll:output_type -> types.BinarySensor
	1, // 13: types.BinarySensorHandler.WatchAll:output_type -> types.BinarySensor
	1, // 14: types.BinarySensorHandler.setState:output_type -> types.BinarySensor
	8, // [8:15] is the sub-list for method output_type
	1, // [1:8] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_binary_sensor_proto_init() }
func file_binary_sensor_proto_init() {
	if File_binary_sensor_proto != nil {
		return
	}
	file_integration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_binary_sensor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBinarySensorStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_binary_sensor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinarySensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_binary_sensor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_binary_sensor_proto_goTypes,
		DependencyIndexes: file_binary_sensor_proto_depIdxs,
		MessageInfos:      file_binary_sensor_proto_msgTypes,
	}.Build()
	File_binary_sensor_proto = out.File
	file_binary_sensor_proto_rawDesc = nil
	file_binary_sensor_proto_goTypes = nil
	file_binary_sensor_proto_depIdxs = nil
}
