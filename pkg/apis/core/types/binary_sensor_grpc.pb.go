// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BinarySensorHandlerClient is the client API for BinarySensorHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinarySensorHandlerClient interface {
	Get(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error)
	Create(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error)
	Update(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error)
	Delete(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (BinarySensorHandler_GetAllClient, error)
	WatchAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (BinarySensorHandler_WatchAllClient, error)
	SetState(ctx context.Context, in *SetBinarySensorStateRequest, opts ...grpc.CallOption) (*BinarySensor, error)
}

type binarySensorHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewBinarySensorHandlerClient(cc grpc.ClientConnInterface) BinarySensorHandlerClient {
	return &binarySensorHandlerClient{cc}
}

func (c *binarySensorHandlerClient) Get(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error) {
	out := new(BinarySensor)
	err := c.cc.Invoke(ctx, "/types.BinarySensorHandler/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binarySensorHandlerClient) Create(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error) {
	out := new(BinarySensor)
	err := c.cc.Invoke(ctx, "/types.BinarySensorHandler/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binarySensorHandlerClient) Update(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error) {
	out := new(BinarySensor)
	err := c.cc.Invoke(ctx, "/types.BinarySensorHandler/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binarySensorHandlerClient) Delete(ctx context.Context, in *BinarySensor, opts ...grpc.CallOption) (*BinarySensor, error) {
	out := new(BinarySensor)
	err := c.cc.Invoke(ctx, "/types.BinarySensorHandler/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binarySensorHandlerClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (BinarySensorHandler_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BinarySensorHandler_serviceDesc.Streams[0], "/types.BinarySensorHandler/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &binarySensorHandlerGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BinarySensorHandler_GetAllClient interface {
	Recv() (*BinarySensor, error)
	grpc.ClientStream
}

type binarySensorHandlerGetAllClient struct {
	grpc.ClientStream
}

func (x *binarySensorHandlerGetAllClient) Recv() (*BinarySensor, error) {
	m := new(BinarySensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *binarySensorHandlerClient) WatchAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (BinarySensorHandler_WatchAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BinarySensorHandler_serviceDesc.Streams[1], "/types.BinarySensorHandler/WatchAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &binarySensorHandlerWatchAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BinarySensorHandler_WatchAllClient interface {
	Recv() (*BinarySensor, error)
	grpc.ClientStream
}

type binarySensorHandlerWatchAllClient struct {
	grpc.ClientStream
}

func (x *binarySensorHandlerWatchAllClient) Recv() (*BinarySensor, error) {
	m := new(BinarySensor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *binarySensorHandlerClient) SetState(ctx context.Context, in *SetBinarySensorStateRequest, opts ...grpc.CallOption) (*BinarySensor, error) {
	out := new(BinarySensor)
	err := c.cc.Invoke(ctx, "/types.BinarySensorHandler/setState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinarySensorHandlerServer is the server API for BinarySensorHandler service.
// All implementations must embed UnimplementedBinarySensorHandlerServer
// for forward compatibility
type BinarySensorHandlerServer interface {
	Get(context.Context, *BinarySensor) (*BinarySensor, error)
	Create(context.Context, *BinarySensor) (*BinarySensor, error)
	Update(context.Context, *BinarySensor) (*BinarySensor, error)
	Delete(context.Context, *BinarySensor) (*BinarySensor, error)
	GetAll(*GetAllRequest, BinarySensorHandler_GetAllServer) error
	WatchAll(*GetAllRequest, BinarySensorHandler_WatchAllServer) error
	SetState(context.Context, *SetBinarySensorStateRequest) (*BinarySensor, error)
	mustEmbedUnimplementedBinarySensorHandlerServer()
}

// UnimplementedBinarySensorHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedBinarySensorHandlerServer struct {
}

func (UnimplementedBinarySensorHandlerServer) Get(context.Context, *BinarySensor) (*BinarySensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBinarySensorHandlerServer) Create(context.Context, *BinarySensor) (*BinarySensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBinarySensorHandlerServer) Update(context.Context, *BinarySensor) (*BinarySensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBinarySensorHandlerServer) Delete(context.Context, *BinarySensor) (*BinarySensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBinarySensorHandlerServer) GetAll(*GetAllRequest, BinarySensorHandler_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBinarySensorHandlerServer) WatchAll(*GetAllRequest, BinarySensorHandler_WatchAllServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAll not implemented")
}
func (UnimplementedBinarySensorHandlerServer) SetState(context.Context, *SetBinarySensorStateRequest) (*BinarySensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedBinarySensorHandlerServer) mustEmbedUnimplementedBinarySensorHandlerServer() {}

// UnsafeBinarySensorHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinarySensorHandlerServer will
// result in compilation errors.
type UnsafeBinarySensorHandlerServer interface {
	mustEmbedUnimplementedBinarySensorHandlerServer()
}

func RegisterBinarySensorHandlerServer(s grpc.ServiceRegistrar, srv BinarySensorHandlerServer) {
	s.RegisterService(&_BinarySensorHandler_serviceDesc, srv)
}

func _BinarySensorHandler_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinarySensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinarySensorHandlerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.BinarySensorHandler/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinarySensorHandlerServer).Get(ctx, req.(*BinarySensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinarySensorHandler_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinarySensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinarySensorHandlerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.BinarySensorHandler/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinarySensorHandlerServer).Create(ctx, req.(*BinarySensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinarySensorHandler_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinarySensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinarySensorHandlerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.BinarySensorHandler/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinarySensorHandlerServer).Update(ctx, req.(*BinarySensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinarySensorHandler_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BinarySensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinarySensorHandlerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.BinarySensorHandler/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinarySensorHandlerServer).Delete(ctx, req.(*BinarySensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinarySensorHandler_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BinarySensorHandlerServer).GetAll(m, &binarySensorHandlerGetAllServer{stream})
}

type BinarySensorHandler_GetAllServer interface {
	Send(*BinarySensor) error
	grpc.ServerStream
}

type binarySensorHandlerGetAllServer struct {
	grpc.ServerStream
}

func (x *binarySensorHandlerGetAllServer) Send(m *BinarySensor) error {
	return x.ServerStream.SendMsg(m)
}

func _BinarySensorHandler_WatchAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BinarySensorHandlerServer).WatchAll(m, &binarySensorHandlerWatchAllServer{stream})
}

type BinarySensorHandler_WatchAllServer interface {
	Send(*BinarySensor) error
	grpc.ServerStream
}

type binarySensorHandlerWatchAllServer struct {
	grpc.ServerStream
}

func (x *binarySensorHandlerWatchAllServer) Send(m *BinarySensor) error {
	return x.ServerStream.SendMsg(m)
}

func _BinarySensorHandler_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBinarySensorStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinarySensorHandlerServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.BinarySensorHandler/setState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinarySensorHandlerServer).SetState(ctx, req.(*SetBinarySensorStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BinarySensorHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.BinarySensorHandler",
	HandlerType: (*BinarySensorHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BinarySensorHandler_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BinarySensorHandler_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BinarySensorHandler_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BinarySensorHandler_Delete_Handler,
		},
		{
			MethodName: "setState",
			Handler:    _BinarySensorHandler_SetState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _BinarySensorHandler_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchAll",
			Handler:       _BinarySensorHandler_WatchAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "binary_sensor.proto",
}
